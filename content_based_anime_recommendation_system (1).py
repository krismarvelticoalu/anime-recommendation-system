# -*- coding: utf-8 -*-
"""content-based-anime-recommendation-system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RG6hDnyyvo4AclBWDTPPfbbcYkilwtJy

Import library yang diperlukan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""**Insight:**
- Proyek ini memerlukan library pandas dan numpy, modul pyplot dari library matplotlib, module feature_extraction.text dari library sklearn, dan fungsi cosine_similarity dari library sklearn melalui modul metrics.pairwise.

Mengupload file kaggle.json untuk kebutuhan download dataset melalui Kaggle API
"""

from google.colab import files
files.upload()

"""**Insight:**
- File kaggle.json diperlukan untuk dapat menggunakan Kaggle API untuk kebutuhan mendownload dataset dari Kaggle.

Download dataset dari kaggle dan ekstrak file zip dataset
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d hernan4444/anime-recommendation-database-2020

!unzip /content/anime-recommendation-database-2020.zip

"""**Insight:**
- Dengan menggunakan Kaggle API, proses download dataset dari Kaggle dapat berlangsung dengan sangat cepat.

Memuat dataset dari file anime.csv ke dalam pandas dataframe
"""

anime = pd.read_csv('/content/anime.csv')

"""**Insight:**
- Dari beberapa file csv yang ada, data yang kita perlukan hanyalah data pada file anime.csv.

Mengatur agar tidak ada batasan jumlah kolom pada dataframe yang ditampilkan
"""

pd.set_option('display.max_columns', None)

"""**Insight:**
- Dengan mengatur pd.set_option('display.max_columns', None) setiap kolom pada dataframe akan ditampilkan.

Mengatur agar jumlah baris pada dataframe yang ditampilkan yaitu 100
"""

pd.set_option('display.max_rows', 100)

"""**Insight:**
- Dengan mengatur pd.set_option('display.max_rows', 100), maksimum baris pada dataframe yang akan ditampilkan adalah 100

Menampilkan informasi mengenai dataframe anime
"""

anime.info()

"""**Insight:**
- Dataframe anime memiliki 34 kolom, 17562 baris.

Menampilkan dataframe anime
"""

anime

"""**Insight:**
- Isi dari setiap kolom pada dataframe dapat dilihat di atas.

Mengecek missing value pada dataframe anime
"""

anime.isnull().sum()

"""**Insight:**
- Tidak terdapat missing value pada dataframe anime.

Mengecek data duplikat pada dataframe anime
"""

anime.duplicated().sum()

"""**Insight:**
- Tidak terdapat data duplikat pada dataframe anime

Menampilkan visualisasi distribusi rating anime
"""

anime_rating = anime['Rating'][anime['Rating'] != 'Unknown'].value_counts().sort_values()

plt.figure(figsize=(7, 7))

plt.title("Anime Rating Distribution")
bars = plt.barh(y=anime_rating.index, width=anime_rating.values, color='#004D99')
plt.bar_label(bars, padding=-30, color='white')
plt.ylabel("Number of Anime")
plt.show()

"""**Insight:**
- Dapat dilihat pada visualisasi di atas, rating anime paling banyak adalah "PG-13 - Teens 13 or older" atau bisa dikatakan remaja yang berumur 13 tahun ke atas. Rating anime terbanyak kedua adalah all ages artinya semua umur. Secara berurutan, rating anime terbanyak berikutnya adalah "PG - Children" atau anak-anak, "Rx - Hentai" atau anime panas khusus dewasa, "R - 17+ (violence & profanity) artinya mengandung kekerasan dan untuk umur 17 ke atas, dan terakhir adalah "R+ - Mild Nudity" artinya terdapat sedikit adegan yang menampilkan ketelanjangan.

Menampilkan visualisasi distribusi tipe anime
"""

anime_type = anime['Type'][anime['Type'] != 'Unknown'].value_counts().sort_values()

plt.figure(figsize=(7, 7))

plt.title("Anime Type Distribution")
bars = plt.bar(x=anime_type.index, height=anime_type.values, color='#004D99')
plt.bar_label(bars, padding=-20, color='white')
plt.ylabel("Number of Anime")
plt.show()

"""**Insight:**
- Berdasarkan visualisasi data di atas, tipe anime paling banyak adalah TV (anime yang tayang di TV) diikuti dengan OVA (dipublikasikan langsung dalam format video), Movie (anime yang tampil di layar lebar), Special (biasanya episode ekstra daripada seri anime yang ada), ONA (anime yang dipublikasikan langsung di internet), dan Music (anime yang merupakan video musik, musik latar belakang, dsb).

Menampilkan visualisasi distribusi sumber adaptasi anime
"""

anime_source = anime['Source'][anime['Source'] != 'Unknown'].value_counts().sort_values()

plt.figure(figsize=(7, 7))

plt.title("Anime Source Distribution")
bars = plt.barh(y=anime_source.index, width=anime_source.values, color='#004D99')
plt.bar_label(bars, padding=5, color='#004D99')
plt.ylabel("Number of Anime")
plt.xticks(range(0, 7000, 1000))
plt.show()

"""**Insight:**
- Berdasarkan visualisasi data di atas, dapat dilihat bahwa sumber adaptasi anime paling banyak adalah Original artinya anime tidak diadaptasikan dari sumber manapun dan langsung dipublikasikan sebagai anime. Sumber adaptasi paling banyak berikutnya adalah Manga (komik jepang) dan diikuti oleh Visual Novel, Game, Light Novel, Other (lainnya/selain yang disebutkan), Novel, Music, 4-koma Manga, Web Manga, Picture book, Book, Card game, Digital manga, dan terakhir adalah Radio.

Menyimpan dataframe anime dengan 3 kolom yaitu MAL_ID, Name, dan Genres ke dalam variabel all_anime.
"""

all_anime = anime[['MAL_ID', 'Name', 'Genres']]
all_anime

"""**Insight:**
 - Dataframe dibuat lebih ringkas dengan memuat hanya 3 kolom yang diperlukan untuk membuat recommendation system dengan pendekatan content-based filtering yaitu MAL_ID, Name, Genres.

Menghilangkan data dengan nilai Unknown dari kolom Genres
"""

all_anime = all_anime[all_anime['Genres'] != 'Unknown']
all_anime['Genres']

"""**Insight:**
- Data dari kolom Genres akan digunakan untuk menghitung cosine similarity pada tahap modeling sehingga perlu dilakukan pembersihan data yang tidak memiliki informasi mengenai genre.

Mengurutkan anime berdasarkan MAL_ID
"""

sorted_anime = all_anime.sort_values('MAL_ID', ascending=True)
sorted_anime

"""**Insight:**
- Memastikan data berurutan dengan melakukan pengurutan menggunakan method sort_values() secara eksplisit. Data diurutkan berdasarkan MAL_ID dan juga diurutkan dari nilai terkecil ke nilai terbesar menggunakan parameter ascending=True.

Assign dataframe sorted_anime ke dalam variabel data kemudian cek 5 sampelnya
"""

data = sorted_anime
data.sample(5)

"""**Insight:**
- Dataframe sorted_anime di-assign ke variabel baru yaitu data agar dataframe secara deskriptif menunjukkan bahwa ini merupakan data yang akan dipakai untuk modeling sekaligus memudahkan dalam pembacaan variabel.

Mengnisialisasi TfidfVectorizer
"""

tf = TfidfVectorizer(token_pattern=r'(?u)\b\w\w+\s*-*\w+\s*\w+\b')

"""**Insight:**
- TfidfVectorizer diinisialisasikan dengan parameter token_pattern=r'(?u)\b\w\w+\s*-*\w+\s*\w+\b' agar setiap genre pada setiap anime dapat dipisahkan atau dilakukan tokenisasi per genrenya dengan akurat.

Melakukan fit lalu ditransformasikan ke bentuk matrix dan melihat bentuk matrix tfidf
"""

tfidf_matrix = tf.fit_transform(data['Genres'])

tfidf_matrix.shape

"""**Insight:**
- Bentuk matrix yaitu memiliki 17499 sampel dan 43 fitur.

Membuat dataframe untuk melihat tf-idf matrix (kolom diisi dengan genre dan baris diisi dengan nama anime), mengambil 10 sampel kemudian ditampilkan.
"""

matrix_df = pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.Name
).sample(10, axis=0)
matrix_df

"""**Insight:**
- TF-IDF matrix dimasukkan ke dalam Dataframe baru dengan mengubah bentuknya menjadi dense terlebih dahulu. Kolom menunjukkan setiap fitur atau dalam kasus ini adalah genre sedangkan setiap baris akan menunjukkan nama anime sebagai index.
- Dataframe baru dibuat sebagai visualisasi untuk melihat setiap vector pada setiap anime.

Menghitung cosine similarity pada matrix tf-idf
"""

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""**Insight:**
- Kemiripan antar satu vektor dengan vektor yang lain atau dengan kata lain kemiripian antar satu anime dengan anime yang lain dihitung dengan menggunakan fungsi cosine_similarity() dengan tfidf_matrix sebagai argumen.

Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama anime kemudian melihat similarity antar anime
"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=data['Name'], columns=data['Name'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""**Insight:**
- Dataframe memberi kemudahan dalam melihat similarity antar anime berdasarkan hasil perhitungan daripada fungsi cosine_similarity.

Mendefinisikan fungsi untuk merekomendasikan anime yang mirip berdasarkan hasil cosine similarity
"""

def anime_recommendations(nama_anime, similarity_data=cosine_sim_df, items=data[['Name', 'Genres']], k=5):
    index = similarity_data.loc[:,nama_anime].to_numpy().argpartition(range(-1, -k, -1))

    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    closest = closest.drop(nama_anime, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

"""**Insight:**
- Fungsi yang didefinisikan memiliki parameter nama_anime yaitu nama anime sebagai preferensi, similarity_data yaitu data hasil perhitungan cosine similarity, items yaitu data Name dan Genres setiap anime sebelum diterapkan tfidf vectorizer, dan k yaitu jumlah anime yang akan direkomendasikan. Secara default parameter similarity_data, items, dan k telah di-assign nilai default apabila pada saat memanggil fungsi, tidak ada argumen pada parameter-parameter tersebut.

Melihat data anime Slam Dunk
"""

slam_dunk = data[data.Name.eq('Slam Dunk')]
slam_dunk

"""**Insight:**
- Anime Slam Dunk dipilih sebagai preferensi yang akan menjadi patokan bagi rekomendasi anime yang akan diberikan.
"""

slam_dunk_genre = slam_dunk['Genres'].values
slam_dunk_genre = slam_dunk_genre[0].split(', ')
print(slam_dunk_genre)

"""**Insight:**
- Setiap genre pada anime slam dunk dipisahkan satu per satu agar dapat dilakukan perbandingan setiap genre pada setiap rekomendasi anime yang hasilnya akan digunakan untuk menentukan rekomendasi anime yang relevan.

Mendapatkan 100 rekomendasi anime yang mirip dengan Slam Dunk
"""

k = 100
recommendations_df = anime_recommendations('Slam Dunk', k=k)
recommendations_df

"""**Insight:**
- Setiap anime yang direkomendasikan beserta genre-genrenya dapat dilihat pada dataframe di atas.

Menentukan rekomendasi yang relevan dan menampilkan jumlah rekomendasi yang relevan
"""

rekomendasi_relevan = []

for row in recommendations_df.values:
  relevancy = 0
  for genre in row[1].split(', '):
    if genre in slam_dunk_genre:
      relevancy += 1

  if relevancy > 3:
      rekomendasi_relevan.append(row[0])

print("Jumlah rekomendasi relevan:", len(rekomendasi_relevan))

"""**Insight:**
- Apabila suatu anime memiliki lebih dari 3 genre yang sama dengan Slam Dunk maka anime tersebut dikatakan relevan.
- Jumlah rekomendasi anime yang relevan akan digunakan pada perhitungan metrik precision.

Menghitung nilai precision dengan membagi nilai total rekomendasi relevan yang didapat yaitu 72 dengan total rekomendasi yaitu 100
"""

total_rekomendasi_relevan = len(rekomendasi_relevan)
total_rekomendasi = k

precision = total_rekomendasi_relevan / total_rekomendasi
print("Nilai precision:", precision)

"""**Insight:**
- Nilai precision adalah 0.77 artinya dari 100 anime yang direkomendasikan, 77 diantaranya merupakan anime yang relevan dengan anime Slam Dunk.
"""